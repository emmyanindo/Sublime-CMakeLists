%YAML 1.2
# https://www.sublimetext.com/docs/3/syntax.html
# https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html
--- #---------------------------------------------------------------------------
name: CMake
comment: Written by Raoul Wols <raoulwols@gmail.com>, 2017
file_extensions: [CMakeLists.txt, cmake]
scope: source.cmake
#-------------------------------------------------------------------------------
variables:
  # Note: we're not doing legacy
  unquoted_argument_element: "[^ \t()#\"\\']"
  unquoted_argument: "{{unquoted_argument_element}}+"
  identifier: \b[[:alpha:]_][[:alnum:]_]*\b
  generic_named_parameter: \b@?[A-Z_][A-Z0-9_]*(?=[^\w-<>=\$])
#-------------------------------------------------------------------------------
contexts:
  prototype:
    - include: comment-block
    - include: comment-line
    - include: variable-substitution
    - include: generator-expression

  main:
    - include: if
    - include: foreach
    - include: while
    - include: set
    - include: function
    - include: macro
    - include: include
    - include: illegal-command
    - include: generic-command

  illegal-command:
    - match: (?i)\bendif\b
      scope: invalid.illegal.stray.endif.cmake
    - match: (?i)\belse\b
      scope: invalid.illegal.stray.else.cmake
    - match: (?i)\belseif\b
      scope: invalid.illegal.stray.elseif.cmake
    - match: (?i)\bendforeach\b
      scope: invalid.illegal.stray.endforeach.cmake
    - match: (?i)\bendwhile\b
      scope: invalid.illegal.stray.endwhile.cmake
    - match: (?i)\bbreak\b
      scope: invalid.illegal.stray.break.cmake
    - match: (?i)\bendfunction\b
      scope: invalid.illegal.stray.endfunction.cmake
    - match: (?i)\bendmacro\b
      scope: invalid.illegal.stray.endmacro.cmake

  # --- INCLUDE ----------------------------------------------------------------

  include:
    - match: (?i)\binclude\b
      scope: keyword.control.import.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: include-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  include-args:
    - meta_scope: meta.function-call.arguments.cmake
    - match: \bOPTIONAL\b
      scope: constant.language.include.OPTIONAL.cmake
    - match: \bNO_POLICY_SCOPE\b
      scope: constant.language.include.NO_POLICY_SCOPE.cmake
    - match: \bRESULT_VARIABLE\b
      scope: constant.language.include.RESULT_VARIABLE.cmake
      push:
        - match: \b{{identifier}}\b
          scope: entity.name.tag.cmake
          pop: true
        - match: \s+
        - match: \n
        - match: ''
          pop: true
    - include: args-common

  # --- FUNCTION / ENDFUNCTION -------------------------------------------------

  function:
    - match: (?i)\bfunction\b
      scope: variable.function.function.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [function-body, function-args-first]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  function-args-first:
    - meta_scope: meta.function-call.arguments.cmake
    - match: '{{identifier}}'
      scope: entity.name.function.cmake
      set: function-args-rest
    - include: variable-substitution
    - match: \s+
    - match: ''
      set: function-args-rest

  function-args-rest:
    - meta_scope: meta.function-call.arguments.cmake
    - include: args-common
    - match: '{{identifier}}'
      scope: variable.parameter.cmake

  function-body:
    - meta_scope: meta.group.function.cmake
    - include: endfunction
    - include: main

  endfunction:
    - match: (?i)\bendfunction\b
      scope: variable.function.endfunction.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: generic-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  # --- MACRO / ENDMACRO -------------------------------------------------------

  macro:
    - match: (?i)\bmacro\b
      scope: variable.function.macro.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [macro-body, macro-args-first]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  macro-args-first:
    - meta_scope: meta.function-call.arguments.cmake
    - match: '{{identifier}}'
      scope: entity.name.function.cmake
      set: macro-args-rest
    - include: variable-substitution
    - match: \s+
    - match: ''
      set: macro-args-rest

  macro-args-rest:
    - meta_scope: meta.function-call.arguments.cmake
    - include: args-common
    - match: '{{identifier}}'
      scope: variable.parameter.cmake

  macro-body:
    - meta_scope: meta.group.function.cmake
    - include: endmacro
    - include: main

  endmacro:
    - match: (?i)\bendmacro\b
      scope: variable.function.endmacro.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: generic-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  # --- IF / ELSEIF / ELSE / ENDIF ---------------------------------------------

  if:
    - match: (?i)\bif\b
      scope: keyword.control.if.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [if-body, if-args]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  if-body:
    - meta_scope: meta.group.if.cmake
    - include: else
    - include: elseif
    - include: endif
    - include: break
    - include: main

  if-args:
    - meta_scope: meta.function-call.arguments.cmake
    - match: \(
      scope: punctuation.section.parens.begin.cmake
      push: if-args
    - match: \bSTREQUAL\b
      scope: constant.language.if.STREQUAL.cmake
    - match: \bNOT\b
      scope: constant.language.if.NOT.cmake
    - match: \bAND\b
      scope: constant.language.if.AND.cmake
    - match: \bOR\b
      scope: constant.language.if.OR.cmake
    - match: \bCOMMAND\b
      scope: constant.language.if.COMMAND.cmake
    - match: \bPOLICY\b
      scope: constant.language.if.POLICY.cmake
    - match: \bTARGET\b
      scope: constant.language.if.TARGET.cmake
    - match: \bTEST\b
      scope: constant.language.if.TEST.cmake
    - match: \bEXISTS\b
      scope: constant.language.if.EXISTS.cmake
    - match: \bIS_NEWER_THAN\b
      scope: constant.language.if.IS_NEWER_THAN.cmake
    - match: \bIS_DIRECTORY\b
      scope: constant.language.if.IS_DIRECTORY.cmake
    - match: \bIS_SYMLINK\b
      scope: constant.language.if.IS_SYMLINK.cmake
    - match: \bIS_ABSOLUTE\b
      scope: constant.language.if.IS_ABSOLUTE.cmake
    - match: \b(VERSION_|STR)?LESS\b
      scope: constant.language.if.LESS.cmake
    - match: \b(VERSION_|STR)?GREATER\b
      scope: constant.language.if.GREATER.cmake
    - match: \b(VERSION_|STR)?EQUAL\b
      scope: constant.language.if.EQUAL.cmake
    - match: \b(VERSION_|STR)?LESS_EQUAL\b
      scope: constant.language.if.LESS_EQUAL.cmake
    - match: \b(VERSION_|STR)?GREATER_EQUAL\b
      scope: constant.language.if.GREATER_EQUAL.cmake
    - match: \bMATCHES\b
      scope: constant.language.if.MATCHES.cmake
      push:
        - match: \[(=*)\[
          captures:
            1: punctuation.definition.string.begin.cmake
          push:
            - meta_include_prototype: false
            - meta_scope: string.regexp.cmake
            - match: \]\1\]
              scope: punctuation.definition.string.end.cmake
              pop: true
            - include: scope:source.regexp#base
        - match: \s+
        - match: \n
        - match: ''
          pop: true
    - include: args-common

  elseif:
    - match: (?i)\belseif\b
      scope: keyword.control.elseif.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [elseif-body, if-args]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  elseif-body:
    - meta_scope: meta.group.elseif.cmake
    - include: elseif
    - include: else
    - include: endif
    - include: break
    - include: main

  else:
    - match: (?i)\b\belse\b
      scope: keyword.control.else.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [else-body, if-args]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  else-body:
    - meta_scope: meta.group.else.cmake
    - include: endif
    - include: break
    - include: main
    - match: (?i)\belse\b
      scope: invalid.illegal.stray.else.cmake
    - match: (?i)\belseif\b
      scope: invalid.illegal.stray.elseif.cmake

  endif:
    - match: (?i)\bendif\b
      scope: keyword.control.endif.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: if-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  # --- FOREACH / ENDFOREACH ---------------------------------------------------

  foreach:
    - match: (?i)\bforeach\b
      scope: keyword.control.foreach.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [foreach-body, foreach-args]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  foreach-args:
    - meta_scope: meta.function-call.arguments.cmake
    - include: args-common
    - match: \bIN\b
      scope: constant.language.foreach.IN.cmake
    - match: \bLISTS\b
      scope: constant.language.foreach.LISTS.cmake
    - match: \bITEMS\b
      scope: constant.language.foreach.ITEMS.cmake
    - match: \bRANGE\b
      scope: constant.language.foreach.RANGE.cmake

  foreach-body:
    - meta_scope: meta.group.foreach.cmake
    - include: break
    - include: endforeach
    - include: main

  endforeach:
    - match: (?i)\bendforeach\b
      scope: keyword.control.endforeach.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: foreach-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  # --- WHILE / ENDWHILE -------------------------------------------------------

  while:
    - match: (?i)\bwhile\b
      scope: keyword.control.while.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [while-body, if-args]
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  while-body:
    - meta_scope: meta.group.while.cmake
    - include: break
    - include: endwhile
    - include: main

  endwhile:
    - match: (?i)\bendwhile\b
      scope: keyword.control.endwhile.cmake
      set:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: if-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  # --- BREAK ------------------------------------------------------------------

  break:
    - match: (?i)\bbreak\b
      scope: keyword.control.break.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: break-args
        - match: \s+
        - match: \n
        - match: .+
          scope: invalid.illegal.expected-opening-brace.cmake

  break-args:
    - meta_scope: meta.function-call.arguments.cmake
    - include: args-common

  #--- SET ---------------------------------------------------------------------

  set:
    - match: (?i)\bset\b
      scope: variable.function.set.cmake
      push:
        - meta_scope: meta.function-call.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: [set-args-rest, set-args-first]

  set-args-first:
    - match: '{{identifier}}'
      scope: entity.name.tag.cmake
      pop: true
    - include: variable-substitution
    - match: \s+
    - match: ''
      pop: true

  set-args-rest:
    - meta_scope: meta.function-call.arguments.cmake
    - match: \bFORCE\b
      scope: constant.language.foreach.FORCE.cmake
    - match: \bPARENT_SCOPE\b
      scope: constant.language.foreach.PARENT_SCOPE.cmake
    - match: \bCACHE\b
      scope: constant.language.foreach.CACHE.cmake
      push:
        - match: \s*(FILEPATH)
          captures:
            1: storage.type.FILEPATH.cmake
          pop: true
        - match: \s*(PATH)
          captures:
            1: storage.type.PATH.cmake
          pop: true
        - match: \s*(STRING)
          captures:
            1: storage.type.STRING.cmake
          pop: true
        - match: \s*(BOOL)
          captures:
            1: storage.type.BOOL.cmake
          pop: true
        - match: \s*(INTERNAL)
          captures:
            1: storage.type.INTERNAL.cmake
          pop: true
        # anything else we scope as an error
        - match: \s*([^\s]*)
          captures:
            1: invalid.illegal.expected-type.cmake
          pop: true
    - include: args-common

  #--- COMMON FUNCTIONALITY FOR COMMANDS ---------------------------------------

  args-common:
    - match: \)
      scope: punctuation.section.parens.end.cmake
      pop: true
    - match: \(
      scope: invalid.illegal.stray.parenthesis.cmake
    - include: string

  generic-command:
    - match: \b{{identifier}}\b
      scope: variable.function.generic.cmake
      push:
        - meta_scope: meta.function-call.generic.cmake
        - match: (?=\()
          set:
            - match: \(
              scope: punctuation.section.parens.begin.cmake
              set: generic-args

  generic-args:
    - meta_scope: meta.function-call.arguments.generic.cmake
    - match: \)
      scope: punctuation.section.parens.end.cmake
      pop: true
    - match: (?={{generic_named_parameter}})
      push: unquoted-argument-or-keyword
    - include: string-unquoted
    - include: string-quoted-double
    - include: string-quoted-single

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#unquoted-argument
  unquoted-argument-or-keyword:
    - meta_scope: constant.language.generic.cmake
    - match: (?=\t| |\(|\)|\#|\"|\\)
      pop: true

  #--- STRING HANDLING ---------------------------------------------------------

  string:
    - include: string-raw
    - include: string-quoted-double
    - include: string-quoted-single
    - include: string-unquoted

  string-raw:
    - match: \[(=*)\[
      scope: punctuation.definition.string.begin.cmake
      push: 
        - meta_include_prototype: false
        - meta_scope: string.raw.cmake
        - match: \]\1\]
          scope: punctuation.definition.string.end.cmake
          pop: true

  string-quoted-double:
    - match: '"'
      scope: punctuation.definition.string.begin.cmake
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.cmake
        - match: '"'
          scope: punctuation.definition.string.end.cmake
          pop: true
        - include: escape-sequences
        - include: highlight-semicolon
        - include: variable-substitution
        - include: generator-expression

  string-quoted-single:
    - match: "'"
      scope: punctuation.definition.string.begin.cmake
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.cmake
        - match: "'"
          scope: punctuation.definition.string.end.cmake
          pop: true
        - include: escape-sequences
        - include: highlight-semicolon
        - include: variable-substitution
        - include: generator-expression

  string-unquoted:
    - match: (?={{unquoted_argument}})
      push:
        - meta_include_prototype: false
        - meta_scope: string.unquoted.cmake
        - include: variable-substitution
        - include: generator-expression
        - match: \\[; ()#"\\]
          scope: constant.character.escape.cmake
        - match: \\.
          scope: invalid.illegal.character.escape.cmake
        - match: (?=\t| |\(|\)|\#|\"|\\|\n)
          pop: true  
        - match: (?=\s*$)
          set:
            - match: \s*$
              pop: true
        - match: (?=\s*#)
          set: prototype
        - include: highlight-semicolon

  highlight-semicolon:
    - match: ;
      scope: punctuation.separator.cmake

  escape-sequences:
    - match: \\[()#" \\$@^trn;]
      scope: constant.character.escape.cmake
    - match: \\.
      scope: invalid.illegal.character.escape.cmake

  #--- VARIABLES AND GENERATOR EXPRESSIONS -------------------------------------

  variable-substitution:
    - match: \$(?:ENV)?\{
      scope: keyword.other.block.begin.cmake
      push:
        - meta_scope: meta.text-substitution.cmake
        - match: \}
          scope: keyword.other.block.end.cmake
          pop: true
        - match: '{{identifier}}'
          scope: variable.parameter.cmake
        - include: prototype

  generator-expression:
    - match: \$<
      scope: keyword.other.block.begin.cmake
      push:
        - meta_scope: meta.generator-expression.cmake
        - include: generator-expression-common
        - match: ':'
          scope: punctuation.definition.separator.cmake
          set:
            - meta_content_scope: meta.generator-expression.cmake
            - match: ':'
              scope: invalid.illegal.too-many-colons.cmake
            - include: generator-expression-common
            - include: prototype
        - include: prototype

  generator-expression-common:
    - match: '>'
      scope: keyword.other.block.end.cmake
      pop: true
    - match: '{{identifier}}'
      scope: variable.parameter.cmake

  #--- COMMENT HANDLING --------------------------------------------------------

  comment-block:
    - match: \#\[(=*)\[
      scope: punctuation.definition.comment.begin.cmake
      push:
        - meta_scope: comment.block.cmake
        - match: \]\1\]
          scope: punctuation.definition.comment.end.cmake
          pop: true

  comment-line:
    - match: \#
      scope: punctuation.definition.comment.cmake
      push:
        - meta_scope: comment.line.cmake
        - match: $
          pop: true
